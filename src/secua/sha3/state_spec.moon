describe 'State tests', ->
    secua = nil
    
    setup ->
        secua = (require 'secua')('secua')
    
    before_each ->
        stub _G, "print"
    
    it 'correctly loads and returns a provided byte array', ->
        input = { 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05 
        }
        state = secua.sha3.state input
        assert.are.same input, state.getBytes!
    it 'correctly changes the specified byte', ->
        input = { 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05 
        }
        expected = { 
            0x81, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05 
        }
        state = secua.sha3.state input
        state.setBit 1, 1, 1, true
        assert.are.same expected, state.getBytes!
    it 'correctly retrieves a given bit', ->
        input = { 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05 
        }
        state = secua.sha3.state input
        assert.is_true state.getBit 5, 5, 8
    it 'provides the correct lane width for the state', ->
        input = { 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05, 
            0x06, 0x07, 0x08, 0x09, 0x0a, 
            0x01, 0x02, 0x03, 0x04, 0x05 
        }
        state = secua.sha3.state input
        assert.is_equal 8, state.width