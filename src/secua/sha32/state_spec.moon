describe 'state tests', ->
    secua = nil
    
    setup ->
        secua = (require 'secua')('secua')
    
    before_each ->
        stub _G, "print"
    
    it 'correctly converts the input to a state', ->
        input = {
            --y1
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            --y2
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            --y3
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            --y4
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            --y5
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
        }

        expected = {
                {
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }
                }, 
                {
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 }
                }, 
                {
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }
                },
                {
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 }
                }, 
                {
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 },
                    { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 },
                    { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 }
                }
            }
        result = secua.sha32.state input
        --assert.are.same expected, result