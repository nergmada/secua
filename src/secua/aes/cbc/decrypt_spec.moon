describe 'Cipher Block Chaining mode decryption', ->
    secua = nil

    setup ->
        secua = (require 'secua')('secua')

    before_each ->
        stub _G, "print"
    
    describe 'correct block size of data', ->
        it 'correctly decrypts with a 128 bit key and 128 multiple block size', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF 
            }
            inputdata = {
                0xD1, 0x56, 0x01, 0xBA, 0x93, 0x0B, 0x26, 0xC3, 0xD0, 0x4E, 0xBC, 0xB5, 0x30, 0xC6, 0x8D, 0x90,
                0x62, 0x26, 0x29, 0xA4, 0xD8, 0xE0, 0xD1, 0xBB, 0xD9, 0x43, 0xA5, 0x94, 0x67, 0x53, 0x3E, 0x7F
            }
            expected = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.are.same expected, (decrypt inputdata, inputkey, iv)
        it 'correctly decrypts with a 192 bit key and 128 multiple block size', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF 
            }
            inputdata = {
                0x34, 0x5F, 0x56, 0x1B, 0x9B, 0x48, 0xE5, 0x07, 0x32, 0x02, 0x53, 0xBD, 0x75, 0xA9, 0x19, 0x2E,
                0x33, 0x33, 0x71, 0x40, 0x0E, 0xD1, 0x94, 0x75, 0xE4, 0xBA, 0x68, 0x81, 0x5B, 0xDA, 0x37, 0xFF
            }
            expected = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.are.same expected, (decrypt inputdata, inputkey, iv)
        it 'correctly decrypts with a 256 bit key and 128 multiple block size', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF 
            }
            inputdata = {
                0xDF, 0xBF, 0x54, 0xF5, 0xD2, 0x6E, 0x6A, 0x6D, 0x06, 0xC1, 0xC5, 0x17, 0x01, 0x08, 0x35, 0x13,
                0x22, 0x96, 0x15, 0xF3, 0xCB, 0x65, 0xD2, 0x9A, 0x61, 0x19, 0x40, 0x29, 0x4D, 0xFF, 0xCE, 0x32
            }
            expected = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.are.same expected, (decrypt inputdata, inputkey, iv)
    describe 'Error handling code', ->
        it 'rejects non existent data', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt nil, inputkey, iv)
            assert.stub(print).was.called 1
        it 'rejects non existent key', ->
            inputdata = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt inputdata, nil, iv)
            assert.stub(print).was.called 1
        it 'rejects non existent IV', ->
            inputdata = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt inputdata, inputkey, nil)
            assert.stub(print).was.called 1
        it 'rejects nil key, input and iv', ->
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt nil, nil, nil)
            assert.stub(print).was.called 1
        it 'rejects non table data', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt 'I cannot think of any good quote to go here', inputkey, iv)
            assert.stub(print).was.called 1
        it 'rejects non table key', ->
            inputdata = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt inputdata, 'Or here', iv)
            assert.stub(print).was.called 1
        it 'rejects non table key, input and iv', ->
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt 'or even here', 'I am so sleep deprived', 'but at least strings are not tables')
            assert.stub(print).was.called 1
        it 'rejects A key of incorrect length', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            inputdata = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt inputdata, inputkey, iv)
            assert.stub(print).was.called 1
        it 'rejects data of incorrect length', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF  
            }
            inputdata = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt inputdata, inputkey, iv)
            assert.stub(print).was.called 1
        it 'rejects an Initialisation vector of incorrect length', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF  
            }
            inputdata = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0xFE, 0xDC, 0xBA, 0x98
            }
            iv = {
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76
            }
            decrypt = secua.aes.cbc.decrypt
            assert.is_nil (decrypt inputdata, inputkey, iv)
            assert.stub(print).was.called 1