describe 'Electronic Code Book mode decryption', ->
    secua = nil

    setup ->
        secua = (require 'secua')('secua')

    before_each ->
        stub _G, "print"
    describe 'Correct block size of data', ->
        it 'correctly decrypts with a 128 bit key and 128 multiple block size', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF 
            }
            inputdata = {
                0xA1, 0xEE, 0x56, 0x08, 0xB3, 0x3A, 0xF0, 0x54, 0x70, 0x85, 0x86, 0x08, 0xD1, 0xDE, 0x08, 0x0F,
                0x10, 0xEC, 0x6F, 0x15, 0x44, 0x67, 0xD6, 0x9A, 0xA9, 0x9C, 0xB9, 0xAF, 0x60, 0x55, 0x78, 0x57
            }
            expected = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.ecb.decrypt
            assert.are.same expected, (decrypt inputdata, inputkey)
        it 'correctly decrypts with a 192 bit key and 128 multiple block size', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF 
            }
            inputdata = {
                0x07, 0x06, 0x9B, 0xE6, 0x24, 0x8A, 0xA2, 0x1C, 0xFB, 0x17, 0x27, 0xB6, 0xEC, 0xC4, 0x57, 0x08,
                0x4A, 0x8D, 0xD3, 0x13, 0xC1, 0xFE, 0x7C, 0x37, 0x22, 0xFC, 0x89, 0xE5, 0x42, 0x20, 0xDE, 0x9E
            }
            expected = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.ecb.decrypt
            assert.are.same expected, (decrypt inputdata, inputkey)
        it 'correctly decrypts with a 256 bit key and 128 multiple block size', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF 
            }
            inputdata = {
                0xE9, 0x71, 0xA5, 0x43, 0x08, 0xFE, 0xB2, 0x11, 0xE3, 0x96, 0xE7, 0x69, 0x8A, 0x1C, 0x2F, 0xD1,
                0xBD, 0x60, 0xEE, 0x77, 0x1C, 0x50, 0x6D, 0x50, 0x8D, 0x76, 0xD2, 0x6F, 0x5A, 0xDD, 0x70, 0x39
            }
            expected = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.ecb.decrypt
            assert.are.same expected, (decrypt inputdata, inputkey)
    describe 'Error handling code', ->
        it 'rejects decrypting a block that is not the correct size', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF 
            }
            inputdata = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98
            }
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt inputdata, inputkey)
            assert.stub(print).was.called 1
        it 'rejects non existent data', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt nil, inputkey)
            assert.stub(print).was.called 1
        it 'rejects non existent key', ->
            inputdata = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt inputdata, nil)
            assert.stub(print).was.called 1
        it 'rejects nil key and input', ->
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt nil, nil)
            assert.stub(print).was.called 1
        it 'rejects non table data', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt 'This is not the data you are looking for', inputkey)
            assert.stub(print).was.called 1
        it 'rejects non table key', ->
            inputdata = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt inputdata, 'Only keys speak in absolutes')
            assert.stub(print).was.called 1
        it 'rejects non table key and input', ->
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt 'The apprentice has become the master', 'only a master of evil darth')
            assert.stub(print).was.called 1
        it 'A key of incorrect length', ->
            inputkey = { 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x67, 0x89, 0xAB, 0xCD, 0xEF  
            }
            inputdata = {
                0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
                0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
            }
            decrypt = secua.aes.ecb.decrypt
            assert.is_nil (decrypt inputdata, inputkey)
            assert.stub(print).was.called 1